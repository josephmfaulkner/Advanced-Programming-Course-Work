// $Id: shape.cpp,v 1.1 2015-07-16 16:47:51-07 - - $

#include <typeinfo>
#include <unordered_map>
using namespace std;

#include "shape.h"
#include "util.h"
#include "graphics.h"

static unordered_map<void*,string> fontname {
   {GLUT_BITMAP_8_BY_13       , "Fixed-8x13"    },
   {GLUT_BITMAP_9_BY_15       , "Fixed-9x15"    },
   {GLUT_BITMAP_HELVETICA_10  , "Helvetica-10"  },
   {GLUT_BITMAP_HELVETICA_12  , "Helvetica-12"  },
   {GLUT_BITMAP_HELVETICA_18  , "Helvetica-18"  },
   {GLUT_BITMAP_TIMES_ROMAN_10, "Times-Roman-10"},
   {GLUT_BITMAP_TIMES_ROMAN_24, "Times-Roman-24"},
};



ostream& operator<< (ostream& out, const vertex& where) {
   out << "(" << where.xpos << "," << where.ypos << ")";
   return out;
}

shape::shape() {
   DEBUGF ('c', this);
}

text::text (void* glut_bitmap_font, const string& textdata):
      glut_bitmap_font(glut_bitmap_font), textdata(textdata) {
   DEBUGF ('c', this);
}

ellipse::ellipse (GLfloat width, GLfloat height):
dimension ({width, height}) {
   DEBUGF ('c', this);
}

circle::circle (GLfloat diameter): ellipse (diameter, diameter) {
   DEBUGF ('c', this);
}


polygon::polygon (const vertex_list& vertices): vertices(vertices) {
   DEBUGF ('c', this);
}

rectangle::rectangle (GLfloat width, GLfloat height):
            polygon({
                      {0,0},
                      {0,height},
                      {width,height},
                      {0,height}
                    }) {
   DEBUGF ('c', this << "(" << width << "," << height << ")");
}

square::square (GLfloat width): rectangle (width, width) {
   DEBUGF ('c', this);
}

diamond::diamond (const GLfloat width, const GLfloat height):
            polygon({
                        {0, 0},
                        {-width / 2, height / 2},
                        {0, height},
                        {width / 2, height / 2}
                    })
{
   DEBUGF ('c', this << "(" << width << "," << height << ")");
}


triangle::triangle (const vertex_list& vertices): polygon (vertices){
    DEBUGF ('c', this);
}

equilateral::equilateral (const GLfloat width):
    triangle({
                {-width/2,0},
                {0, (sqrt(3) * width) / 2},
                {width/2,0}
             }){
    DEBUGF ('c', this << "(" << width << ")");
}





void text::draw (const vertex& center, const rgbcolor& color ,bool selected) const {
   DEBUGF ('d', this << "(" << center << "," << color << ")");
   rgbcolor text_color;
   if (selected)
       text_color = rgbcolor(window::highlight_color);
   else
       text_color = color;
       auto display_text =
             reinterpret_cast<const unsigned char*>(textdata.c_str());
   glColor3ubv(text_color.ubvec);
   glRasterPos2f(center.xpos, center.ypos);
   glutBitmapString(glut_bitmap_font, display_text);

}

void ellipse::draw (const vertex& center, const rgbcolor& color,bool selected) const {
       DEBUGF ('d', this << "(" << center << "," << color << ")");
       //Draw innerfilling
       glBegin(GL_POLYGON);
       glEnable (GL_LINE_SMOOTH);
       glColor3ubv(color.ubvec);
       float circle_round = 2 * M_PI;
       float delt= 2 * M_PI / 16;
       for (float angle = 0; angle < circle_round;) {
       float x = cos(angle) * dimension.xpos/2 + center.xpos;
       float y = sin(angle) * dimension.ypos/2 + center.ypos;
       glVertex2f(x, y);
       angle = angle + delt;
       }
       glEnd();


   //Draw selected outline
   if (selected) {
       glLineWidth(window::border_width);
       glBegin (GL_LINE_LOOP);
       glColor3ubv(rgbcolor(window::highlight_color).ubvec);
       glEnable (GL_LINE_SMOOTH);
       float delt = 2 * M_PI / 16;

       for (float angle = 0; angle < circle_round;) {

       float x = cos(angle) * dimension.xpos/2 + center.xpos;
       float y = sin(angle) * dimension.ypos/2 + center.ypos;
       glVertex2f(x, y);
       angle = angle + delt;
       }
       glEnd();
   }
}

void polygon::draw (const vertex& center, const rgbcolor& color,bool selected) const {
   DEBUGF ('d', this << "(" << center << "," << color << ")");
   GLfloat x_;
   GLfloat y_;
   int v_count = 0;
   for (vertex vertex_ : vertices) {
       x_ = (x_*v_count + vertex_.xpos)/(v_count+1);
       y_ = (y_*v_count + vertex_.ypos)/(v_count+1);
       v_count++;
   }

   //Draw polygon filling:
   glBegin(GL_POLYGON);
   glColor3ubv(color.ubvec);
   for (vertex vertex_ : vertices) {
   GLfloat x = center.xpos + vertex_.xpos - x_;
   GLfloat y = center.ypos + vertex_.ypos - y_;

   glVertex2f(x,y);
   }
   glEnd();
   //Draw polygon selected outline
   if (selected) {
       glLineWidth(window::border_width);
       glBegin (GL_LINE_LOOP);
       glColor3ubv(rgbcolor(window::highlight_color).ubvec);
       glLineWidth(window::border_width);
       for (vertex vertex_ : vertices) {
       GLfloat x = center.xpos + vertex_.xpos - x_;
       GLfloat y = center.ypos + vertex_.ypos - y_;

       glVertex2f(x,y);
       }
       glEnd();
   }

}






void shape::show (ostream& out) const {
   out << this << "->" << demangle (*this) << ": ";
}

void text::show (ostream& out) const {
   shape::show (out);
   out << glut_bitmap_font << "(" << fontname[glut_bitmap_font]
       << ") \"" << textdata << "\"";
}

void ellipse::show (ostream& out) const {
   shape::show (out);
   out << "{" << dimension << "}";
}

void polygon::show (ostream& out) const {
   shape::show (out);
   out << "{" << vertices << "}";
}

ostream& operator<< (ostream& out, const shape& obj) {
   obj.show (out);
   return out;
}

